dnl Process this file with autoconf to produce a configure script.
AC_INIT(openCryptoki, 2.1, yoder1@us.ibm.com,)
dnl AM_INIT_AUTOMAKE(openCryptoki, 2.0.0)
AM_INIT_AUTOMAKE(1.6.1)

dnl Checks for programs.

dnl Checks for libraries.

dnl Checks for header files.
dnl One or more of the following macro's messes up CFLAGS
backup_CFLAGS=$CFLAGS
AC_DISABLE_STATIC
AC_PROG_LIBTOOL

AC_HEADER_STDC
AC_CHECK_HEADERS(fcntl.h limits.h strings.h sys/file.h syslog.h unistd.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_UID_T
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_STRUCT_TM
dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MEMCMP
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd)

TO_BUILD=0

CFLAGS=$backup_CFLAGS
# Debugging support
AC_ARG_ENABLE(debug, [  --enable-debug          turn on all openCryptoki debugging flags],
              [               enable_debug="yes"],)

if test "x$enable_debug" != xyes; then
	CFLAGS="-O2 -D_XOPEN_SOURCE=500 $CFLAGS"
else
	CFLAGS="-O0 -g -DDEBUG -DDEBUGON -D_XOPEN_SOURCE=500 $CFLAGS"
	AC_MSG_RESULT([*** Enabling debugging at user request ***])
fi

# 31-bit compile option; TODO: set this as a --build option match
AC_ARG_ENABLE(31_bit, [  --enable-31_bit         compile 31-bit (for S390)],
              [               enable_31_bit="yes"],)

if test "x$enable_31_bit" = xyes; then
   	CFLAGS="$CFLAGS -m31"
	AC_MSG_RESULT([*** Enabling 31-bit mode at user request ***])
fi

# Support for OpenSSL path specification
AC_ARG_WITH(openssl,
        [  --with-openssl[[=DIR]]     build with OpenSSL support [[/usr/local/ssl]]],
        [AC_MSG_RESULT([*** Using OpenSSL directory $withval ***])
	 LDFLAGS="-L$withval/lib $LDFLAGS"
	 CFLAGS="-I$withval/include $CFLAGS"],
        [openssl_prefix=""]
)

# Support for the IBM 4758 (PCICC) token
AC_ARG_ENABLE(icctok,
              [  --disable-icctok        don't build the IBM 4758 (PCICC) token [default=enabled]],
              [AM_CONDITIONAL(ICC, false)],
              [enable_icctok="yes"])

if test "x$enable_icctok" = xyes; then
	AC_CHECK_HEADER(scc_host.h,
			AC_CHECK_LIB(scc, sccOpenAdapter,
				[AM_CONDITIONAL(ICC, true)
				 TO_BUILD=1],
				[AM_CONDITIONAL(ICC, false)]),
			[AM_CONDITIONAL(ICC, false)],,)
else
        AC_MSG_RESULT([*** Disabling the IBM 4758 (PCICC) token at user request ***])
fi

# Support for the IBM Crypto Accelerator (PCICA) token
AC_ARG_ENABLE(icatok,
              [  --disable-icatok        don't build the IBM Crypto Accelerator (PCICA) token [default=enabled]],
              [AM_CONDITIONAL(ICA, false)],
              [enable_icatok="yes"])

if test "x$enable_icatok" = xyes; then
	AC_CHECK_HEADER(ica_api.h,
			AC_CHECK_LIB(ica, icaOpenAdapter,
				[AM_CONDITIONAL(ICA, true)
				 TO_BUILD=1],
				[AM_CONDITIONAL(ICA, false)]),
			[AM_CONDITIONAL(ICA, false)],,)
else
        AC_MSG_RESULT([*** Disabling the IBM Crypto Accelerator (PCICA) token at user request ***])
fi

# OpenSSL support for the software token
AC_ARG_ENABLE(swtok,
              [  --disable-swtok         don't build the software token [default=enabled]],
              [AM_CONDITIONAL(SOFT, false)],
              [enable_swtok="yes"])

if test "x$enable_swtok" = xyes; then
        AC_CHECK_LIB(crypto, AES_encrypt,
             [AM_CONDITIONAL(SOFT, true)
              TO_BUILD=1],
             [AM_CONDITIONAL(SOFT, false)])
else
        AC_MSG_RESULT([*** Disabling the software token at user request ***])
fi

# Support for the Broadcom Crypto Accelerator
AC_ARG_ENABLE(bcomtok,
              [  --disable-bcomtok         don't build the Broadcom Crypto Accelerator token [default=enabled]],
              [AM_CONDITIONAL(BCOM, false)],
              [enable_bcomtok="yes"])

if test "x$enable_bcomtok" = xyes; then
	AC_CHECK_HEADER(ubsec.h,
			AC_CHECK_LIB(ubsec, ubsec_open,
				[AM_CONDITIONAL(BCOM, true)
				 TO_BUILD=1],
				[AM_CONDITIONAL(BCOM, false)]),
			[AM_CONDITIONAL(BCOM, false)],,)
else
        AC_MSG_RESULT([*** Disabling the Broadcom Crypto Accelerator token at user request ***])
fi

# Support for the AEP Crypto Accelerator
AC_ARG_ENABLE(aeptok,
              [  --disable-aeptok        don't build the AEP Crypto Accelerator token [default=enabled]],
              [AM_CONDITIONAL(AEP, false)],
              [enable_aeptok="yes"])

if test "x$enable_aeptok" = xyes; then
        AC_CHECK_LIB(aep, AEP_Initialize,
             [AM_CONDITIONAL(AEP, true)
              TO_BUILD=1],
             [AM_CONDITIONAL(AEP, false)])
else
        AC_MSG_RESULT([*** Disabling the AEP Crypto Accelerator token at user request ***])
fi

# Support for the Corrent Crypto Accelerator
AC_ARG_ENABLE(crtok,
              [  --disable-crtok         don't build the Corrent Crypto Accelerator token [default=enabled]],
              [AM_CONDITIONAL(CR, false)],
              [enable_crtok="yes"])

if test "x$enable_crtok" = xyes; then
	AC_CHECK_HEADER(typhoon.h,
			AC_CHECK_LIB(socketarmor, CR_init_lib,
				[AM_CONDITIONAL(CR, true)
				 TO_BUILD=1],
				[AM_CONDITIONAL(CR, false)], -ldl),
			[AM_CONDITIONAL(CR, false)],,)
else
        AC_MSG_RESULT([*** Disabling the Corrent Crypto Accelerator token at user request ***])
fi

# Compute $target
AC_CANONICAL_TARGET

# Arch specific stuff
case $target in
	*ppc64*)
		CFLAGS="$CFLAGS -DPKCS64"
		AM_CONDITIONAL(BUILD_UTILS, false)
		AM_CONDITIONAL(S390, false)
		AC_MSG_RESULT([*** 64bit platform detected.  Not building utilities. ***]) ;;
	*s390x*)
		CFLAGS="$CFLAGS -DPKCS64"
		AM_CONDITIONAL(BUILD_UTILS, false)
		AM_CONDITIONAL(S390, true)
		AC_MSG_RESULT([*** 64bit platform detected.  Not building utilities. ***]) ;;
	*ppc*)
		CFLAGS="$CFLAGS -DPKCS64"
		AM_CONDITIONAL(S390, false)
		AM_CONDITIONAL(BUILD_UTILS, true) ;;
	*s390*)
		CFLAGS="$CFLAGS -DPKCS64 -m31"
		AM_CONDITIONAL(BUILD_UTILS, true)
		AM_CONDITIONAL(S390, true) ;;
	*)
		AM_CONDITIONAL(BUILD_UTILS, true)
		AM_CONDITIONAL(S390, false) ;;
esac

CFLAGS="$CFLAGS -DPCKG_VER=\\\"$PACKAGE_VERSION\\\""

# At this point, CFLAGS is set to something sensible
AC_PROG_CC

AC_OUTPUT(Makefile usr/Makefile \
          usr/lib/Makefile \
          usr/lib/pkcs11/Makefile \
          usr/lib/pkcs11/api/Makefile \
          usr/lib/pkcs11/ica_stdll/Makefile \
          usr/lib/pkcs11/ica_s390_stdll/Makefile \
          usr/sbin/Makefile \
          usr/sbin/pkcsslotd/Makefile \
          usr/lib/pkcs11/methods/Makefile \
          usr/lib/pkcs11/methods/4758_startup/Makefile \
          usr/lib/pkcs11/methods/leeds_slot/Makefile \
          usr/lib/pkcs11/methods/pkcsconf/Makefile \
          usr/lib/pkcs11/leeds_stdll/Makefile \
          usr/lib/pkcs11/soft_stdll/Makefile \
          usr/lib/pkcs11/bcom_stdll/Makefile \
          usr/lib/pkcs11/cr_stdll/Makefile \
          usr/lib/pkcs11/aep_stdll/Makefile \
          usr/lib/pkcs11/methods/4758_status/Makefile)

if [[ $TO_BUILD -eq 0 ]]; then
       echo " "
       echo "Warning!"
       echo " "
       echo "No tokens are flagged as buildable! Install the necessary components of the "
       echo "tokens you'd like to build and re-configure openCryptoki. If you have no "
       echo "hardware, install openssl's libcrypto.a to build a software token. See README"
       echo "for information on how to point the openCryptoki build to your token's libraries"
       echo " "
fi

